###
# User Management API Test Requests
# Spring Boot Application - User CRUD Operations
###

@baseUrl = http://localhost:8080/api/v1

### 1. Create a new user
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "firstName": "John",
  "lastName": "Doe",
  "phoneNumber": "090-1234-5678"
}

### 2. Get user by ID
GET {{baseUrl}}/users/1

### 3. Get all users
GET {{baseUrl}}/users/list

### 4. Get user by email
GET {{baseUrl}}/users/email/john.doe@example.com

### 5. Search users with parameters
GET {{baseUrl}}/users/search?email=john.doe@example.com&firstName=John&status=ACTIVE&page=0&size=10&sortBy=id&sortDir=asc

### 6. Search users - Basic search
GET {{baseUrl}}/users/search

### 7. Search users - With pagination
GET {{baseUrl}}/users/search?page=0&size=5&sortBy=firstName&sortDir=desc

### 8. Search users - By status
GET {{baseUrl}}/users/search?status=ACTIVE

### 9. Update user
PUT {{baseUrl}}/users/1
Content-Type: application/json

{
  "email": "john.updated@example.com",
  "firstName": "John Updated",
  "lastName": "Doe Updated",
  "phoneNumber": "090-9876-5432",
  "status": "ACTIVE"
}

### 10. Create multiple users for testing
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "alice.smith@example.com",
  "firstName": "Alice",
  "lastName": "Smith",
  "phoneNumber": "080-1111-2222"
}

###
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "bob.johnson@example.com",
  "firstName": "Bob",
  "lastName": "Johnson",
  "phoneNumber": "070-3333-4444"
}

###
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "carol.wilson@example.com",
  "firstName": "Carol",
  "lastName": "Wilson",
  "phoneNumber": "060-5555-6666"
}

### 11. Update user status to INACTIVE
PUT {{baseUrl}}/users/2
Content-Type: application/json

{
  "status": "INACTIVE"
}

### 12. Update user status to SUSPENDED
PUT {{baseUrl}}/users/3
Content-Type: application/json

{
  "status": "SUSPENDED"
}

### 13. Search users by different statuses
GET {{baseUrl}}/users/search?status=INACTIVE

###
GET {{baseUrl}}/users/search?status=SUSPENDED

### 14. Search users by name
GET {{baseUrl}}/users/search?firstName=Alice

###
GET {{baseUrl}}/users/search?lastName=Johnson

### 15. Complex search with multiple parameters
GET {{baseUrl}}/users/search?firstName=Carol&lastName=Wilson&status=ACTIVE

### 16. Test validation errors - Invalid email
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "invalid-email",
  "firstName": "Test",
  "lastName": "User"
}

### 17. Test validation errors - Missing required fields
POST {{baseUrl}}/users
Content-Type: application/json

{
  "phoneNumber": "090-0000-0000"
}

### 18. Test validation errors - Empty strings
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "",
  "firstName": "",
  "lastName": ""
}

### 19. Delete user
DELETE {{baseUrl}}/users/4

### 20. Try to get deleted user (should return 404)
GET {{baseUrl}}/users/4

### 21. Try to get non-existent user
GET {{baseUrl}}/users/999

### 22. Try to get user by non-existent email
GET {{baseUrl}}/users/email/nonexistent@example.com

### 23. Try to update non-existent user
PUT {{baseUrl}}/users/999
Content-Type: application/json

{
  "firstName": "Should Not Work"
}

### 24. Try to delete non-existent user
DELETE {{baseUrl}}/users/999

###
# End of API Test Requests
###
